#pragma once

#include <vector>

#include "Utils.h"

// Forward definitions of vulkan handles and types so that we don't have to include vulkan headers in Aurorae
// headers
FORWARD_DEFINE_VK_HANDLE(VkDevice)
FORWARD_DEFINE_VK_HANDLE(VmaAllocator)
FORWARD_DEFINE_VK_HANDLE(VmaAllocation)
FORWARD_DEFINE_VK_HANDLE(VkBuffer)
FORWARD_DEFINE_VK_HANDLE(VkDescriptorSetLayout)
FORWARD_DEFINE_VK_HANDLE(VkPipelineLayout)
using VkDeviceSize = uint64_t;
using VkBufferUsageFlags = uint32_t;
enum VmaMemoryUsage : int32_t;

namespace aur {

// sync with VkDescriptorType
enum class DescriptorType : u32 {
  // VK_DESCRIPTOR_TYPE_SAMPLER = 0,
  // VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = 1,
  // VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE = 2,
  // VK_DESCRIPTOR_TYPE_STORAGE_IMAGE = 3,
  // VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER = 4,
  // VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER = 5,
  UniformBuffer = 6,
  // VK_DESCRIPTOR_TYPE_STORAGE_BUFFER = 7,
  // VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC = 8,
  // VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC = 9,
  // VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT = 10,
  // VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK = 1000138000,
  // VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR = 1000150000,
  // VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV = 1000165000,
  // VK_DESCRIPTOR_TYPE_SAMPLE_WEIGHT_IMAGE_QCOM = 1000440000,
  // VK_DESCRIPTOR_TYPE_BLOCK_MATCH_IMAGE_QCOM = 1000440001,
  // VK_DESCRIPTOR_TYPE_MUTABLE_EXT = 1000351000,
  // VK_DESCRIPTOR_TYPE_PARTITIONED_ACCELERATION_STRUCTURE_NV = 1000570000,
  // VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT = VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK,
  // VK_DESCRIPTOR_TYPE_MUTABLE_VALVE = VK_DESCRIPTOR_TYPE_MUTABLE_EXT,
  // VK_DESCRIPTOR_TYPE_MAX_ENUM = 0x7FFFFFFF
};

// sync with VkShaderStageFlagBits
enum class ShaderStage : u32 {
  Vertex = 0x00000001,
  // VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT = 0x00000002,
  // VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT = 0x00000004,
  // VK_SHADER_STAGE_GEOMETRY_BIT = 0x00000008,
  Fragment = 0x00000010,
  // VK_SHADER_STAGE_COMPUTE_BIT = 0x00000020,
  // VK_SHADER_STAGE_ALL_GRAPHICS = 0x0000001F,
  // VK_SHADER_STAGE_ALL = 0x7FFFFFFF,
  // VK_SHADER_STAGE_RAYGEN_BIT_KHR = 0x00000100,
  // VK_SHADER_STAGE_ANY_HIT_BIT_KHR = 0x00000200,
  // VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR = 0x00000400,
  // VK_SHADER_STAGE_MISS_BIT_KHR = 0x00000800,
  // VK_SHADER_STAGE_INTERSECTION_BIT_KHR = 0x00001000,
  // VK_SHADER_STAGE_CALLABLE_BIT_KHR = 0x00002000,
  // VK_SHADER_STAGE_TASK_BIT_EXT = 0x00000040,
  // VK_SHADER_STAGE_MESH_BIT_EXT = 0x00000080,
  // VK_SHADER_STAGE_SUBPASS_SHADING_BIT_HUAWEI = 0x00004000,
  // VK_SHADER_STAGE_CLUSTER_CULLING_BIT_HUAWEI = 0x00080000,
  // VK_SHADER_STAGE_RAYGEN_BIT_NV = VK_SHADER_STAGE_RAYGEN_BIT_KHR,
  // VK_SHADER_STAGE_ANY_HIT_BIT_NV = VK_SHADER_STAGE_ANY_HIT_BIT_KHR,
  // VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV = VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR,
  // VK_SHADER_STAGE_MISS_BIT_NV = VK_SHADER_STAGE_MISS_BIT_KHR,
  // VK_SHADER_STAGE_INTERSECTION_BIT_NV = VK_SHADER_STAGE_INTERSECTION_BIT_KHR,
  // VK_SHADER_STAGE_CALLABLE_BIT_NV = VK_SHADER_STAGE_CALLABLE_BIT_KHR,
  // VK_SHADER_STAGE_TASK_BIT_NV = VK_SHADER_STAGE_TASK_BIT_EXT,
  // VK_SHADER_STAGE_MESH_BIT_NV = VK_SHADER_STAGE_MESH_BIT_EXT,
  // VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
};

u32 toStageFlags(const std::vector<ShaderStage>& stages);

struct PushConstant {
  std::vector<ShaderStage> stages;
  u32 size;
};

} // namespace aur
